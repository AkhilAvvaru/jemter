<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="build-web-test-plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">For scripting only</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Trance Login Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trance_Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${__V(Username_${num})}&quot;,&#xd;
    &quot;password&quot;:&quot;${__V(Password_${num})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">10</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">num</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Username_1" elementType="Argument">
                <stringProp name="Argument.name">Username_1</stringProp>
                <stringProp name="Argument.value">mohan.avvaru</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_1" elementType="Argument">
                <stringProp name="Argument.name">Password_1</stringProp>
                <stringProp name="Argument.value">Akhil@1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_2" elementType="Argument">
                <stringProp name="Argument.name">Username_2</stringProp>
                <stringProp name="Argument.value">sqaAssociate</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_2" elementType="Argument">
                <stringProp name="Argument.name">Password_2</stringProp>
                <stringProp name="Argument.value">Dnis@123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_3" elementType="Argument">
                <stringProp name="Argument.name">Username_3</stringProp>
                <stringProp name="Argument.value">maharshit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_3" elementType="Argument">
                <stringProp name="Argument.name">Password_3</stringProp>
                <stringProp name="Argument.value">Dnis@1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_4" elementType="Argument">
                <stringProp name="Argument.name">Username_4</stringProp>
                <stringProp name="Argument.value">vishal</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_4" elementType="Argument">
                <stringProp name="Argument.name">Password_4</stringProp>
                <stringProp name="Argument.value">Dnis@123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_5" elementType="Argument">
                <stringProp name="Argument.name">Username_5</stringProp>
                <stringProp name="Argument.value">yeshwanth.neelam</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_5" elementType="Argument">
                <stringProp name="Argument.name">Password_5</stringProp>
                <stringProp name="Argument.value">Sqa@1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_6" elementType="Argument">
                <stringProp name="Argument.name">Username_6</stringProp>
                <stringProp name="Argument.value">Naveen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_6" elementType="Argument">
                <stringProp name="Argument.name">Password_6</stringProp>
                <stringProp name="Argument.value">Dnis@1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_7" elementType="Argument">
                <stringProp name="Argument.name">Username_7</stringProp>
                <stringProp name="Argument.value">laxman</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_7" elementType="Argument">
                <stringProp name="Argument.name">Password_7</stringProp>
                <stringProp name="Argument.value">Dnis@123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_8" elementType="Argument">
                <stringProp name="Argument.name">Username_8</stringProp>
                <stringProp name="Argument.value">sravanthi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_8" elementType="Argument">
                <stringProp name="Argument.name">Password_8</stringProp>
                <stringProp name="Argument.value">Nishanth29@</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_9" elementType="Argument">
                <stringProp name="Argument.name">Username_9</stringProp>
                <stringProp name="Argument.value">NaveenTest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_9" elementType="Argument">
                <stringProp name="Argument.name">Password_9</stringProp>
                <stringProp name="Argument.value">Naveen@123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Username_10" elementType="Argument">
                <stringProp name="Argument.name">Username_10</stringProp>
                <stringProp name="Argument.value">dilipn</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Password_10" elementType="Argument">
                <stringProp name="Argument.name">Password_10</stringProp>
                <stringProp name="Argument.value">Dnis@1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
            <intProp name="calcMode">0</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>0.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message">200</stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">bd6ifks3yc.execute-api.us-east-1.amazonaws.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Job_id" elementType="Argument">
              <stringProp name="Argument.name">Job_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="testresult" enabled="true">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
        </ResultSaver>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transcription Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Get all Content" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="job_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Job_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">job_id</stringProp>
              </elementProp>
              <elementProp name="language_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Langauge_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">language_id</stringProp>
              </elementProp>
              <elementProp name="level_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Transcription_L1_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">level_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/transcriptions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To get all the content in the trnascription</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Update all Content" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Transcription_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;font_family&quot;:&quot;Roboto&quot;,&#xd;
    &quot;font_size&quot;:&quot;12&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/transcription_updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To update all the speaker tag with entire content and global properites of transcription</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Create Section" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Transcription_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;position&quot;: 1,&#xd;
    &quot;section&quot;: {&#xd;
        &quot;id&quot;: &quot;0&quot;,&#xd;
        &quot;speaker_id&quot;: &quot;FS1&quot;,&#xd;
        &quot;stime&quot;: 5.97,&#xd;
        &quot;etime&quot;: 11.66,&#xd;
        &quot;speaker_tag_color&quot;: &quot;#FF0000&quot;,&#xd;
        &quot;texts&quot;: [&#xd;
            {&#xd;
                &quot;text&quot;: &quot;de&quot;,&#xd;
                &quot;originalText&quot;: &quot;de&quot;,&#xd;
                &quot;stime&quot;: 5.97,&#xd;
                &quot;etime&quot;: 6.05,&#xd;
                &quot;index&quot;: 6,&#xd;
                &quot;confidence_score&quot;: 0.798,&#xd;
                &quot;index_id&quot;: &quot;0-5&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;marins&quot;,&#xd;
                &quot;originalText&quot;: &quot;marins&quot;,&#xd;
                &quot;stime&quot;: 6.15,&#xd;
                &quot;etime&quot;: 6.3,&#xd;
                &quot;index&quot;: 7,&#xd;
                &quot;confidence_score&quot;: 0.354,&#xd;
                &quot;index_id&quot;: &quot;0-6&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;délictueux&quot;,&#xd;
                &quot;originalText&quot;: &quot;délictueux&quot;,&#xd;
                &quot;stime&quot;: 6.42,&#xd;
                &quot;etime&quot;: 6.55,&#xd;
                &quot;index&quot;: 8,&#xd;
                &quot;confidence_score&quot;: 0.412,&#xd;
                &quot;index_id&quot;: &quot;0-7&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;100&quot;,&#xd;
                &quot;originalText&quot;: &quot;100&quot;,&#xd;
                &quot;stime&quot;: 6.83,&#xd;
                &quot;etime&quot;: 6.98,&#xd;
                &quot;index&quot;: 9,&#xd;
                &quot;confidence_score&quot;: 0.36,&#xd;
                &quot;index_id&quot;: &quot;0-8&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Abou&quot;,&#xd;
                &quot;originalText&quot;: &quot;Abou&quot;,&#xd;
                &quot;stime&quot;: 7.02,&#xd;
                &quot;etime&quot;: 7.13,&#xd;
                &quot;index&quot;: 10,&#xd;
                &quot;confidence_score&quot;: 0.815,&#xd;
                &quot;index_id&quot;: &quot;0-9&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;originalText&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;stime&quot;: 7.14,&#xd;
                &quot;etime&quot;: 7.22,&#xd;
                &quot;index&quot;: 11,&#xd;
                &quot;confidence_score&quot;: 0.535,&#xd;
                &quot;index_id&quot;: &quot;0-10&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;repos&quot;,&#xd;
                &quot;originalText&quot;: &quot;repos&quot;,&#xd;
                &quot;stime&quot;: 7.47,&#xd;
                &quot;etime&quot;: 7.56,&#xd;
                &quot;index&quot;: 12,&#xd;
                &quot;confidence_score&quot;: 0.168,&#xd;
                &quot;index_id&quot;: &quot;0-11&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pointe&quot;,&#xd;
                &quot;originalText&quot;: &quot;pointe&quot;,&#xd;
                &quot;stime&quot;: 7.59,&#xd;
                &quot;etime&quot;: 7.87,&#xd;
                &quot;index&quot;: 13,&#xd;
                &quot;confidence_score&quot;: 0.567,&#xd;
                &quot;index_id&quot;: &quot;0-12&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pas&quot;,&#xd;
                &quot;originalText&quot;: &quot;pas&quot;,&#xd;
                &quot;stime&quot;: 7.98,&#xd;
                &quot;etime&quot;: 8.13,&#xd;
                &quot;index&quot;: 14,&#xd;
                &quot;confidence_score&quot;: 0.951,&#xd;
                &quot;index_id&quot;: &quot;0-13&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;est&quot;,&#xd;
                &quot;originalText&quot;: &quot;est&quot;,&#xd;
                &quot;stime&quot;: 8.33,&#xd;
                &quot;etime&quot;: 8.39,&#xd;
                &quot;index&quot;: 15,&#xd;
                &quot;confidence_score&quot;: 0.401,&#xd;
                &quot;index_id&quot;: &quot;0-14&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;jeune,&quot;,&#xd;
                &quot;originalText&quot;: &quot;jeune,&quot;,&#xd;
                &quot;stime&quot;: 8.51,&#xd;
                &quot;etime&quot;: 8.55,&#xd;
                &quot;index&quot;: 16,&#xd;
                &quot;confidence_score&quot;: 0.828,&#xd;
                &quot;index_id&quot;: &quot;0-15&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;moins&quot;,&#xd;
                &quot;originalText&quot;: &quot;moins&quot;,&#xd;
                &quot;stime&quot;: 8.55,&#xd;
                &quot;etime&quot;: 8.66,&#xd;
                &quot;index&quot;: 17,&#xd;
                &quot;confidence_score&quot;: 0.608,&#xd;
                &quot;index_id&quot;: &quot;0-16&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;f6&quot;,&#xd;
                &quot;originalText&quot;: &quot;f6&quot;,&#xd;
                &quot;stime&quot;: 9.08,&#xd;
                &quot;etime&quot;: 9.37,&#xd;
                &quot;index&quot;: 18,&#xd;
                &quot;confidence_score&quot;: 0.465,&#xd;
                &quot;index_id&quot;: &quot;0-17&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;originalText&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;stime&quot;: 10.14,&#xd;
                &quot;etime&quot;: 10.58,&#xd;
                &quot;index&quot;: 19,&#xd;
                &quot;confidence_score&quot;: 0.892,&#xd;
                &quot;index_id&quot;: &quot;0-18&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;elle&quot;,&#xd;
                &quot;originalText&quot;: &quot;elle&quot;,&#xd;
                &quot;stime&quot;: 10.58,&#xd;
                &quot;etime&quot;: 10.67,&#xd;
                &quot;index&quot;: 20,&#xd;
                &quot;confidence_score&quot;: 0.764,&#xd;
                &quot;index_id&quot;: &quot;0-19&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;en&quot;,&#xd;
                &quot;originalText&quot;: &quot;en&quot;,&#xd;
                &quot;stime&quot;: 10.76,&#xd;
                &quot;etime&quot;: 10.81,&#xd;
                &quot;index&quot;: 21,&#xd;
                &quot;confidence_score&quot;: 0.411,&#xd;
                &quot;index_id&quot;: &quot;0-20&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;originalText&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;stime&quot;: 11.02,&#xd;
                &quot;etime&quot;: 11.27,&#xd;
                &quot;index&quot;: 22,&#xd;
                &quot;confidence_score&quot;: 0.591,&#xd;
                &quot;index_id&quot;: &quot;0-21&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;tu&quot;,&#xd;
                &quot;originalText&quot;: &quot;tu&quot;,&#xd;
                &quot;stime&quot;: 11.27,&#xd;
                &quot;etime&quot;: 11.33,&#xd;
                &quot;index&quot;: 23,&#xd;
                &quot;confidence_score&quot;: 0.918,&#xd;
                &quot;index_id&quot;: &quot;0-22&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;vois,&quot;,&#xd;
                &quot;originalText&quot;: &quot;vois,&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.43,&#xd;
                &quot;index&quot;: 24,&#xd;
                &quot;confidence_score&quot;: 0.76,&#xd;
                &quot;index_id&quot;: &quot;0-23&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;bon&quot;,&#xd;
                &quot;originalText&quot;: &quot;bon&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.51,&#xd;
                &quot;index&quot;: 25,&#xd;
                &quot;confidence_score&quot;: 0.668,&#xd;
                &quot;index_id&quot;: &quot;0-24&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;et&quot;,&#xd;
                &quot;originalText&quot;: &quot;et&quot;,&#xd;
                &quot;stime&quot;: 11.57,&#xd;
                &quot;etime&quot;: 11.61,&#xd;
                &quot;index&quot;: 26,&#xd;
                &quot;confidence_score&quot;: 0.848,&#xd;
                &quot;index_id&quot;: &quot;0-25&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;la.&quot;,&#xd;
                &quot;originalText&quot;: &quot;la.&quot;,&#xd;
                &quot;stime&quot;: 11.66,&#xd;
                &quot;etime&quot;: 11.66,&#xd;
                &quot;index&quot;: 27,&#xd;
                &quot;confidence_score&quot;: 0.999,&#xd;
                &quot;index_id&quot;: &quot;0-26&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/transcription/section</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To create a Speaker tag in the transcription level</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Update Section" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Transcription_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;position&quot;: 1,&#xd;
    &quot;section&quot;:[ {&#xd;
        &quot;id&quot;: &quot;0&quot;,&#xd;
        &quot;speaker_id&quot;: &quot;FS1&quot;,&#xd;
        &quot;stime&quot;: 5.97,&#xd;
        &quot;etime&quot;: 11.66,&#xd;
        &quot;speaker_tag_color&quot;: &quot;#FF0000&quot;,&#xd;
        &quot;texts&quot;: [&#xd;
            {&#xd;
                &quot;text&quot;: &quot;de&quot;,&#xd;
                &quot;originalText&quot;: &quot;de&quot;,&#xd;
                &quot;stime&quot;: 5.97,&#xd;
                &quot;etime&quot;: 6.05,&#xd;
                &quot;index&quot;: 6,&#xd;
                &quot;confidence_score&quot;: 0.798,&#xd;
                &quot;index_id&quot;: &quot;0-5&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;marins&quot;,&#xd;
                &quot;originalText&quot;: &quot;marins&quot;,&#xd;
                &quot;stime&quot;: 6.15,&#xd;
                &quot;etime&quot;: 6.3,&#xd;
                &quot;index&quot;: 7,&#xd;
                &quot;confidence_score&quot;: 0.354,&#xd;
                &quot;index_id&quot;: &quot;0-6&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;délictueux&quot;,&#xd;
                &quot;originalText&quot;: &quot;délictueux&quot;,&#xd;
                &quot;stime&quot;: 6.42,&#xd;
                &quot;etime&quot;: 6.55,&#xd;
                &quot;index&quot;: 8,&#xd;
                &quot;confidence_score&quot;: 0.412,&#xd;
                &quot;index_id&quot;: &quot;0-7&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;100&quot;,&#xd;
                &quot;originalText&quot;: &quot;100&quot;,&#xd;
                &quot;stime&quot;: 6.83,&#xd;
                &quot;etime&quot;: 6.98,&#xd;
                &quot;index&quot;: 9,&#xd;
                &quot;confidence_score&quot;: 0.36,&#xd;
                &quot;index_id&quot;: &quot;0-8&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Abou&quot;,&#xd;
                &quot;originalText&quot;: &quot;Abou&quot;,&#xd;
                &quot;stime&quot;: 7.02,&#xd;
                &quot;etime&quot;: 7.13,&#xd;
                &quot;index&quot;: 10,&#xd;
                &quot;confidence_score&quot;: 0.815,&#xd;
                &quot;index_id&quot;: &quot;0-9&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;originalText&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;stime&quot;: 7.14,&#xd;
                &quot;etime&quot;: 7.22,&#xd;
                &quot;index&quot;: 11,&#xd;
                &quot;confidence_score&quot;: 0.535,&#xd;
                &quot;index_id&quot;: &quot;0-10&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;repos&quot;,&#xd;
                &quot;originalText&quot;: &quot;repos&quot;,&#xd;
                &quot;stime&quot;: 7.47,&#xd;
                &quot;etime&quot;: 7.56,&#xd;
                &quot;index&quot;: 12,&#xd;
                &quot;confidence_score&quot;: 0.168,&#xd;
                &quot;index_id&quot;: &quot;0-11&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pointe&quot;,&#xd;
                &quot;originalText&quot;: &quot;pointe&quot;,&#xd;
                &quot;stime&quot;: 7.59,&#xd;
                &quot;etime&quot;: 7.87,&#xd;
                &quot;index&quot;: 13,&#xd;
                &quot;confidence_score&quot;: 0.567,&#xd;
                &quot;index_id&quot;: &quot;0-12&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pas&quot;,&#xd;
                &quot;originalText&quot;: &quot;pas&quot;,&#xd;
                &quot;stime&quot;: 7.98,&#xd;
                &quot;etime&quot;: 8.13,&#xd;
                &quot;index&quot;: 14,&#xd;
                &quot;confidence_score&quot;: 0.951,&#xd;
                &quot;index_id&quot;: &quot;0-13&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;est&quot;,&#xd;
                &quot;originalText&quot;: &quot;est&quot;,&#xd;
                &quot;stime&quot;: 8.33,&#xd;
                &quot;etime&quot;: 8.39,&#xd;
                &quot;index&quot;: 15,&#xd;
                &quot;confidence_score&quot;: 0.401,&#xd;
                &quot;index_id&quot;: &quot;0-14&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;jeune,&quot;,&#xd;
                &quot;originalText&quot;: &quot;jeune,&quot;,&#xd;
                &quot;stime&quot;: 8.51,&#xd;
                &quot;etime&quot;: 8.55,&#xd;
                &quot;index&quot;: 16,&#xd;
                &quot;confidence_score&quot;: 0.828,&#xd;
                &quot;index_id&quot;: &quot;0-15&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;moins&quot;,&#xd;
                &quot;originalText&quot;: &quot;moins&quot;,&#xd;
                &quot;stime&quot;: 8.55,&#xd;
                &quot;etime&quot;: 8.66,&#xd;
                &quot;index&quot;: 17,&#xd;
                &quot;confidence_score&quot;: 0.608,&#xd;
                &quot;index_id&quot;: &quot;0-16&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;f6&quot;,&#xd;
                &quot;originalText&quot;: &quot;f6&quot;,&#xd;
                &quot;stime&quot;: 9.08,&#xd;
                &quot;etime&quot;: 9.37,&#xd;
                &quot;index&quot;: 18,&#xd;
                &quot;confidence_score&quot;: 0.465,&#xd;
                &quot;index_id&quot;: &quot;0-17&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;originalText&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;stime&quot;: 10.14,&#xd;
                &quot;etime&quot;: 10.58,&#xd;
                &quot;index&quot;: 19,&#xd;
                &quot;confidence_score&quot;: 0.892,&#xd;
                &quot;index_id&quot;: &quot;0-18&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;elle&quot;,&#xd;
                &quot;originalText&quot;: &quot;elle&quot;,&#xd;
                &quot;stime&quot;: 10.58,&#xd;
                &quot;etime&quot;: 10.67,&#xd;
                &quot;index&quot;: 20,&#xd;
                &quot;confidence_score&quot;: 0.764,&#xd;
                &quot;index_id&quot;: &quot;0-19&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;en&quot;,&#xd;
                &quot;originalText&quot;: &quot;en&quot;,&#xd;
                &quot;stime&quot;: 10.76,&#xd;
                &quot;etime&quot;: 10.81,&#xd;
                &quot;index&quot;: 21,&#xd;
                &quot;confidence_score&quot;: 0.411,&#xd;
                &quot;index_id&quot;: &quot;0-20&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;originalText&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;stime&quot;: 11.02,&#xd;
                &quot;etime&quot;: 11.27,&#xd;
                &quot;index&quot;: 22,&#xd;
                &quot;confidence_score&quot;: 0.591,&#xd;
                &quot;index_id&quot;: &quot;0-21&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;tu&quot;,&#xd;
                &quot;originalText&quot;: &quot;tu&quot;,&#xd;
                &quot;stime&quot;: 11.27,&#xd;
                &quot;etime&quot;: 11.33,&#xd;
                &quot;index&quot;: 23,&#xd;
                &quot;confidence_score&quot;: 0.918,&#xd;
                &quot;index_id&quot;: &quot;0-22&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;vois,&quot;,&#xd;
                &quot;originalText&quot;: &quot;vois,&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.43,&#xd;
                &quot;index&quot;: 24,&#xd;
                &quot;confidence_score&quot;: 0.76,&#xd;
                &quot;index_id&quot;: &quot;0-23&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;bon&quot;,&#xd;
                &quot;originalText&quot;: &quot;bon&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.51,&#xd;
                &quot;index&quot;: 25,&#xd;
                &quot;confidence_score&quot;: 0.668,&#xd;
                &quot;index_id&quot;: &quot;0-24&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;et&quot;,&#xd;
                &quot;originalText&quot;: &quot;et&quot;,&#xd;
                &quot;stime&quot;: 11.57,&#xd;
                &quot;etime&quot;: 11.61,&#xd;
                &quot;index&quot;: 26,&#xd;
                &quot;confidence_score&quot;: 0.848,&#xd;
                &quot;index_id&quot;: &quot;0-25&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;la.&quot;,&#xd;
                &quot;originalText&quot;: &quot;la.&quot;,&#xd;
                &quot;stime&quot;: 11.66,&#xd;
                &quot;etime&quot;: 11.66,&#xd;
                &quot;index&quot;: 27,&#xd;
                &quot;confidence_score&quot;: 0.999,&#xd;
                &quot;index_id&quot;: &quot;0-26&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            }&#xd;
        ]&#xd;
    }]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/transcription/section</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To update the Particular speaker with particular Section id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Delete Section" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Transcription_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;position&quot;: 1,&#xd;
    &quot;section&quot;:[ {&#xd;
        &quot;id&quot;: &quot;0&quot;,&#xd;
        &quot;speaker_id&quot;: &quot;FS1&quot;,&#xd;
        &quot;stime&quot;: 5.97,&#xd;
        &quot;etime&quot;: 11.66,&#xd;
        &quot;speaker_tag_color&quot;: &quot;#FF0000&quot;,&#xd;
        &quot;texts&quot;: [&#xd;
            {&#xd;
                &quot;text&quot;: &quot;de&quot;,&#xd;
                &quot;originalText&quot;: &quot;de&quot;,&#xd;
                &quot;stime&quot;: 5.97,&#xd;
                &quot;etime&quot;: 6.05,&#xd;
                &quot;index&quot;: 6,&#xd;
                &quot;confidence_score&quot;: 0.798,&#xd;
                &quot;index_id&quot;: &quot;0-5&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;marins&quot;,&#xd;
                &quot;originalText&quot;: &quot;marins&quot;,&#xd;
                &quot;stime&quot;: 6.15,&#xd;
                &quot;etime&quot;: 6.3,&#xd;
                &quot;index&quot;: 7,&#xd;
                &quot;confidence_score&quot;: 0.354,&#xd;
                &quot;index_id&quot;: &quot;0-6&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;délictueux&quot;,&#xd;
                &quot;originalText&quot;: &quot;délictueux&quot;,&#xd;
                &quot;stime&quot;: 6.42,&#xd;
                &quot;etime&quot;: 6.55,&#xd;
                &quot;index&quot;: 8,&#xd;
                &quot;confidence_score&quot;: 0.412,&#xd;
                &quot;index_id&quot;: &quot;0-7&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;100&quot;,&#xd;
                &quot;originalText&quot;: &quot;100&quot;,&#xd;
                &quot;stime&quot;: 6.83,&#xd;
                &quot;etime&quot;: 6.98,&#xd;
                &quot;index&quot;: 9,&#xd;
                &quot;confidence_score&quot;: 0.36,&#xd;
                &quot;index_id&quot;: &quot;0-8&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Abou&quot;,&#xd;
                &quot;originalText&quot;: &quot;Abou&quot;,&#xd;
                &quot;stime&quot;: 7.02,&#xd;
                &quot;etime&quot;: 7.13,&#xd;
                &quot;index&quot;: 10,&#xd;
                &quot;confidence_score&quot;: 0.815,&#xd;
                &quot;index_id&quot;: &quot;0-9&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;originalText&quot;: &quot;Dhabi&quot;,&#xd;
                &quot;stime&quot;: 7.14,&#xd;
                &quot;etime&quot;: 7.22,&#xd;
                &quot;index&quot;: 11,&#xd;
                &quot;confidence_score&quot;: 0.535,&#xd;
                &quot;index_id&quot;: &quot;0-10&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;repos&quot;,&#xd;
                &quot;originalText&quot;: &quot;repos&quot;,&#xd;
                &quot;stime&quot;: 7.47,&#xd;
                &quot;etime&quot;: 7.56,&#xd;
                &quot;index&quot;: 12,&#xd;
                &quot;confidence_score&quot;: 0.168,&#xd;
                &quot;index_id&quot;: &quot;0-11&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pointe&quot;,&#xd;
                &quot;originalText&quot;: &quot;pointe&quot;,&#xd;
                &quot;stime&quot;: 7.59,&#xd;
                &quot;etime&quot;: 7.87,&#xd;
                &quot;index&quot;: 13,&#xd;
                &quot;confidence_score&quot;: 0.567,&#xd;
                &quot;index_id&quot;: &quot;0-12&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;pas&quot;,&#xd;
                &quot;originalText&quot;: &quot;pas&quot;,&#xd;
                &quot;stime&quot;: 7.98,&#xd;
                &quot;etime&quot;: 8.13,&#xd;
                &quot;index&quot;: 14,&#xd;
                &quot;confidence_score&quot;: 0.951,&#xd;
                &quot;index_id&quot;: &quot;0-13&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;est&quot;,&#xd;
                &quot;originalText&quot;: &quot;est&quot;,&#xd;
                &quot;stime&quot;: 8.33,&#xd;
                &quot;etime&quot;: 8.39,&#xd;
                &quot;index&quot;: 15,&#xd;
                &quot;confidence_score&quot;: 0.401,&#xd;
                &quot;index_id&quot;: &quot;0-14&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;jeune,&quot;,&#xd;
                &quot;originalText&quot;: &quot;jeune,&quot;,&#xd;
                &quot;stime&quot;: 8.51,&#xd;
                &quot;etime&quot;: 8.55,&#xd;
                &quot;index&quot;: 16,&#xd;
                &quot;confidence_score&quot;: 0.828,&#xd;
                &quot;index_id&quot;: &quot;0-15&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;moins&quot;,&#xd;
                &quot;originalText&quot;: &quot;moins&quot;,&#xd;
                &quot;stime&quot;: 8.55,&#xd;
                &quot;etime&quot;: 8.66,&#xd;
                &quot;index&quot;: 17,&#xd;
                &quot;confidence_score&quot;: 0.608,&#xd;
                &quot;index_id&quot;: &quot;0-16&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;f6&quot;,&#xd;
                &quot;originalText&quot;: &quot;f6&quot;,&#xd;
                &quot;stime&quot;: 9.08,&#xd;
                &quot;etime&quot;: 9.37,&#xd;
                &quot;index&quot;: 18,&#xd;
                &quot;confidence_score&quot;: 0.465,&#xd;
                &quot;index_id&quot;: &quot;0-17&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;originalText&quot;: &quot;Marilyn,&quot;,&#xd;
                &quot;stime&quot;: 10.14,&#xd;
                &quot;etime&quot;: 10.58,&#xd;
                &quot;index&quot;: 19,&#xd;
                &quot;confidence_score&quot;: 0.892,&#xd;
                &quot;index_id&quot;: &quot;0-18&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;elle&quot;,&#xd;
                &quot;originalText&quot;: &quot;elle&quot;,&#xd;
                &quot;stime&quot;: 10.58,&#xd;
                &quot;etime&quot;: 10.67,&#xd;
                &quot;index&quot;: 20,&#xd;
                &quot;confidence_score&quot;: 0.764,&#xd;
                &quot;index_id&quot;: &quot;0-19&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;en&quot;,&#xd;
                &quot;originalText&quot;: &quot;en&quot;,&#xd;
                &quot;stime&quot;: 10.76,&#xd;
                &quot;etime&quot;: 10.81,&#xd;
                &quot;index&quot;: 21,&#xd;
                &quot;confidence_score&quot;: 0.411,&#xd;
                &quot;index_id&quot;: &quot;0-20&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;originalText&quot;: &quot;ouverte,&quot;,&#xd;
                &quot;stime&quot;: 11.02,&#xd;
                &quot;etime&quot;: 11.27,&#xd;
                &quot;index&quot;: 22,&#xd;
                &quot;confidence_score&quot;: 0.591,&#xd;
                &quot;index_id&quot;: &quot;0-21&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;tu&quot;,&#xd;
                &quot;originalText&quot;: &quot;tu&quot;,&#xd;
                &quot;stime&quot;: 11.27,&#xd;
                &quot;etime&quot;: 11.33,&#xd;
                &quot;index&quot;: 23,&#xd;
                &quot;confidence_score&quot;: 0.918,&#xd;
                &quot;index_id&quot;: &quot;0-22&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;vois,&quot;,&#xd;
                &quot;originalText&quot;: &quot;vois,&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.43,&#xd;
                &quot;index&quot;: 24,&#xd;
                &quot;confidence_score&quot;: 0.76,&#xd;
                &quot;index_id&quot;: &quot;0-23&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;bon&quot;,&#xd;
                &quot;originalText&quot;: &quot;bon&quot;,&#xd;
                &quot;stime&quot;: 11.43,&#xd;
                &quot;etime&quot;: 11.51,&#xd;
                &quot;index&quot;: 25,&#xd;
                &quot;confidence_score&quot;: 0.668,&#xd;
                &quot;index_id&quot;: &quot;0-24&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;et&quot;,&#xd;
                &quot;originalText&quot;: &quot;et&quot;,&#xd;
                &quot;stime&quot;: 11.57,&#xd;
                &quot;etime&quot;: 11.61,&#xd;
                &quot;index&quot;: 26,&#xd;
                &quot;confidence_score&quot;: 0.848,&#xd;
                &quot;index_id&quot;: &quot;0-25&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            },&#xd;
            {&#xd;
                &quot;text&quot;: &quot;la.&quot;,&#xd;
                &quot;originalText&quot;: &quot;la.&quot;,&#xd;
                &quot;stime&quot;: 11.66,&#xd;
                &quot;etime&quot;: 11.66,&#xd;
                &quot;index&quot;: 27,&#xd;
                &quot;confidence_score&quot;: 0.999,&#xd;
                &quot;index_id&quot;: &quot;0-26&quot;,&#xd;
                &quot;imageUrl&quot;: &quot;../../../assets/images/bookmark-yellow.svg&quot;,&#xd;
                &quot;isNew&quot;: true&#xd;
            }&#xd;
        ]&#xd;
    }]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/transcription/section</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To delete the Particular speaker with particular Section id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transcription Deliver output" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Transcription_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/deliver_captions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">bd6ifks3yc.execute-api.us-east-1.amazonaws.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Job_id" elementType="Argument">
              <stringProp name="Argument.name">Job_id</stringProp>
              <stringProp name="Argument.value">30670</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L1_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L1_id</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L2_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L2_id</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L3_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L3_id</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L1_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L1_id</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L2_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L2_id</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L3_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L3_id</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Langauge_id" elementType="Argument">
              <stringProp name="Argument.name">Langauge_id</stringProp>
              <stringProp name="Argument.value">26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">10</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Captioning Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning Get all Captions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="job_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Job_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">job_id</stringProp>
              </elementProp>
              <elementProp name="language_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Langauge_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">language_id</stringProp>
              </elementProp>
              <elementProp name="level_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Captioning_L1_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">level_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/captions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To get all the captions data in captioning level</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning Global Update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;captions&quot;:&#xd;
    [&#xd;
        {&#xd;
            &quot;caption&quot;:&quot;Kevin veterinary more secure S La Liga&quot;,&#xd;
            &quot;stime&quot;:&quot;00:00:00.20&quot;,&#xd;
            &quot;etime&quot;:&quot;00:00:03.54&quot;,&#xd;
            &quot;duration&quot;:&quot;0:00:03.34&quot;,&#xd;
            &quot;justification&quot;:&quot;C&quot;,&#xd;
            &quot;id&quot;:&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;,&#xd;
            &quot;horizontal&quot;:&quot;L&quot;,&quot;vertical&quot;:&quot;B&quot;&#xd;
            }&#xd;
        ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/captions</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To Update all the captions</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning Single Caption Update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
    &quot;caption&quot;:&#xd;
        {&#xd;
            &quot;caption&quot;:&quot;Kevin veterinary more secure S La Liga&quot;,&#xd;
            &quot;stime&quot;:&quot;00:00:00.20&quot;,&#xd;
            &quot;etime&quot;:&quot;00:00:03.54&quot;,&#xd;
            &quot;duration&quot;:&quot;0:00:03.34&quot;,&#xd;
            &quot;justification&quot;:&quot;C&quot;,&#xd;
            &quot;id&quot;:&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;,&#xd;
            &quot;horizontal&quot;:&quot;L&quot;,&quot;vertical&quot;:&quot;B&quot;&#xd;
            }&#xd;
        &#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/captions</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To update the single caption field with specific caption-id</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - Merge caption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;merge&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
    &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
    &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
        &quot;source_ids&quot;:[&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;],&#xd;
        &quot;dist_id&quot;:&quot;f23414b6-5c2c-11ed-bde8-9266603d2221&quot;,&#xd;
        &quot;position&quot;:0,&#xd;
        &quot;caption&quot;:&#xd;
        {&#xd;
            &quot;length&quot;:19,&#xd;
            &quot;caption&quot;:&quot;Kevin veterinary more secure S La Liga \n mountain lukalevira&quot;,&#xd;
            &quot;duration&quot;:&quot;00:00:05.00&quot;,&#xd;
            &quot;stime&quot;:&quot;00:00:00.20&quot;,&#xd;
            &quot;etime&quot;:&quot;00:00:05.20&quot;,&#xd;
            &quot;horizontal&quot;:&quot;C&quot;,&#xd;
            &quot;justification&quot;:&quot;C&quot;,&#xd;
            &quot;vertical&quot;:&quot;B&quot;,&#xd;
            &quot;sh_vertical&quot;:&quot;15&quot;,&#xd;
            &quot;sh_horizontal&quot;:&quot;0&quot;,&#xd;
            &quot;font_size&quot;:&quot;12&quot;,&#xd;
            &quot;font_family&quot;:&quot;Roboto&quot;,&#xd;
            &quot;indexes&quot;:[1,2],&#xd;
            &quot;id&quot;:&quot;f23414b6-5c2c-11ed-bde8-9266603d2221&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To perform merge operation you need both source id and destination id</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - Delete Caption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;delete&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
          &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
          &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
          &quot;caption_ids&quot;:[&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;]&#xd;
        &#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To perform delete operation you need the caption ids</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - Delete Caption Content" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;delete&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
          &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
          &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
           &quot;caption_id&quot;:&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;&#xd;
        &#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To perform delete operation you need the caption ids</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - Update Caption Properties" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;dates&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
          &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
          &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
          &quot;caption_id&quot;:&quot;f2340fe8-5c2c-11ed-bde8-9266603d2221&quot;,&#xd;
          &quot;horizontal&quot;:&quot;C&quot;,&#xd;
          &quot;justification&quot;:&quot;C&quot;,&#xd;
          &quot;vertical&quot;:&quot;B&quot;,&#xd;
          &quot;sh_vertical&quot;:&quot;15&quot;,&#xd;
          &quot;sh_horizontal&quot;:&quot;0&quot;,&#xd;
          &quot;font_size&quot;:&quot;12&quot;,&#xd;
          &quot;font_family&quot;:&quot;Roboto&quot;,&#xd;
        &#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To perform update caption properties you need Caption ids</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - Append Captions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;append&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
          &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
          &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
          &quot;position&quot;:0,&#xd;
       &quot;caption&quot;:&#xd;
            {&#xd;
            &quot;length&quot;:19,&#xd;
            &quot;caption&quot;:&quot;Kevin veterinary more secure S La Liga \n mountain lukalevira&quot;,&#xd;
            &quot;duration&quot;:&quot;00:00:05.00&quot;,&#xd;
            &quot;stime&quot;:&quot;00:00:00.20&quot;,&#xd;
            &quot;etime&quot;:&quot;00:00:05.20&quot;,&#xd;
            &quot;horizontal&quot;:&quot;C&quot;,&#xd;
            &quot;justification&quot;:&quot;C&quot;,&#xd;
            &quot;vertical&quot;:&quot;B&quot;,&#xd;
            &quot;sh_vertical&quot;:&quot;15&quot;,&#xd;
            &quot;sh_horizontal&quot;:&quot;0&quot;,&#xd;
            &quot;font_size&quot;:&quot;12&quot;,&#xd;
            &quot;font_family&quot;:&quot;Roboto&quot;,&#xd;
            &quot;indexes&quot;:[1,2],&#xd;
            &quot;id&quot;:&quot;f23414b6-5c2c-11ed-bde8-9266603d2221&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">To perform Apphend captions you need the exact position</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Captioning - TCR time code " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;operation&quot;:&quot;tcr&quot;,&#xd;
	&quot;payload&quot;:&#xd;
	{&#xd;
		&quot;job_id&quot;:&quot;${Job_id}&quot;,&#xd;
          &quot;level_id&quot;:&quot;${Captioning_L1_id}&quot;,&#xd;
          &quot;language_id&quot;:&quot;${Langauge_id}&quot;,&#xd;
          &quot;time_code&quot;:&quot;00:00:01:13&quot;&#xd;
        &#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Environment}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sqa/caption-updates</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">bd6ifks3yc.execute-api.us-east-1.amazonaws.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Job_id" elementType="Argument">
              <stringProp name="Argument.name">Job_id</stringProp>
              <stringProp name="Argument.value">30670</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L1_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L1_id</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L2_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L2_id</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Transcription_L3_id" elementType="Argument">
              <stringProp name="Argument.name">Transcription_L3_id</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L1_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L1_id</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L2_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L2_id</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Captioning_L3_id" elementType="Argument">
              <stringProp name="Argument.name">Captioning_L3_id</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Langauge_id" elementType="Argument">
              <stringProp name="Argument.name">Langauge_id</stringProp>
              <stringProp name="Argument.value">26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">10</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
